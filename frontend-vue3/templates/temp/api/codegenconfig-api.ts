/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href=\'https://gitee.com/zuohuaijun/Admin.NET/\'>https://gitee.com/zuohuaijun/Admin.NET</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { defHttp } from '/@/utils/http/axios';
import { RequestOptions, UploadFileParams } from '/@/utils/http/axios/types';
import { assertParamExists } from '../common';
import {
   CodeGenConfig,
   XnRestfulResultOfListOfCodeGenConfig,
   XnRestfulResultOfSysCodeGenConfig,
   } from '../models';

         /**
         * @summary 详情
         * @param {number}[id] 主键Id
         * @param {number}[codeGenId] 代码生成主表ID
         * @param {string}[columnName] 数据库字段名
         * @param {string}[lowerColumnName] 数据库字段名(首字母小写)
         * @param {string}[columnComment] 字段描述
         * @param {string}[netType] .NET类型
         * @param {string}[effectType] 作用类型（字典）
         * @param {string}[fkEntityName] 外键实体名称
         * @param {string}[lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string}[fkColumnName] 外键显示字段
         * @param {string}[lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string}[fkColumnNetType] 外键显示字段.NET类型
         * @param {string}[dictTypeCode] 字典code
         * @param {string}[whetherRetract] 列表是否缩进（字典）
         * @param {string}[whetherRequired] 是否必填（字典）
         * @param {string}[queryWhether] 是否是查询条件
         * @param {string}[queryType] 查询方式
         * @param {string}[whetherTable] 列表显示
         * @param {string}[whetherOrderBy] 列表排序显示
         * @param {string}[whetherAddUpdate] 增改
         * @param {string}[columnKey] 主外键
         * @param {string}[dataType] 数据库中类型（物理类型）
         * @param {string}[whetherCommon] 是否是通用字段
         * @param {RequestOptions}options 额外配置，用来设置错误提示方法，是否返回原始数据，是否返回原始响应头，参数是否拼接到url等等
         */
         export function sysCodeGenerateConfigDetailGet(id?: number, codeGenId?: number, columnName?: string, lowerColumnName?: string, columnComment?: string, netType?: string, effectType?: string, fkEntityName?: string, lowerFkEntityName?: string, fkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherOrderBy?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, options?: RequestOptions) {
            const params = {  } as any
            if (id !== undefined) {
                params['Id'] = id;
            }
            if (codeGenId !== undefined) {
                params['CodeGenId'] = codeGenId;
            }
            if (columnName !== undefined) {
                params['ColumnName'] = columnName;
            }
            if (lowerColumnName !== undefined) {
                params['LowerColumnName'] = lowerColumnName;
            }
            if (columnComment !== undefined) {
                params['ColumnComment'] = columnComment;
            }
            if (netType !== undefined) {
                params['NetType'] = netType;
            }
            if (effectType !== undefined) {
                params['EffectType'] = effectType;
            }
            if (fkEntityName !== undefined) {
                params['FkEntityName'] = fkEntityName;
            }
            if (lowerFkEntityName !== undefined) {
                params['LowerFkEntityName'] = lowerFkEntityName;
            }
            if (fkColumnName !== undefined) {
                params['FkColumnName'] = fkColumnName;
            }
            if (lowerFkColumnName !== undefined) {
                params['LowerFkColumnName'] = lowerFkColumnName;
            }
            if (fkColumnNetType !== undefined) {
                params['FkColumnNetType'] = fkColumnNetType;
            }
            if (dictTypeCode !== undefined) {
                params['DictTypeCode'] = dictTypeCode;
            }
            if (whetherRetract !== undefined) {
                params['WhetherRetract'] = whetherRetract;
            }
            if (whetherRequired !== undefined) {
                params['WhetherRequired'] = whetherRequired;
            }
            if (queryWhether !== undefined) {
                params['QueryWhether'] = queryWhether;
            }
            if (queryType !== undefined) {
                params['QueryType'] = queryType;
            }
            if (whetherTable !== undefined) {
                params['WhetherTable'] = whetherTable;
            }
            if (whetherOrderBy !== undefined) {
                params['WhetherOrderBy'] = whetherOrderBy;
            }
            if (whetherAddUpdate !== undefined) {
                params['WhetherAddUpdate'] = whetherAddUpdate;
            }
            if (columnKey !== undefined) {
                params['ColumnKey'] = columnKey;
            }
            if (dataType !== undefined) {
                params['DataType'] = dataType;
            }
            if (whetherCommon !== undefined) {
                params['WhetherCommon'] = whetherCommon;
            }
            return defHttp.request<XnRestfulResultOfSysCodeGenConfig>(
              {
                url: '/sysCodeGenerateConfig/detail',
                method: 'GET',
                headers: {'Content-Type': 'application/json'},
                params
              },
              options
            )
         }

         /**
         * @summary 更新
         * @param {Array<CodeGenConfig>}[codeGenConfig] 
         * @param {RequestOptions}options 额外配置，用来设置错误提示方法，是否返回原始数据，是否返回原始响应头，参数是否拼接到url等等
         */
         export function sysCodeGenerateConfigEditPost(codeGenConfig?: Array<CodeGenConfig>, options?: RequestOptions) {
            const params = {  ...codeGenConfig  }
            return defHttp.request<void>(
              {
                url: '/sysCodeGenerateConfig/edit',
                method: 'POST',
                headers: {'Content-Type': 'application/json-patch+json'},
                params
              },
              options
            )
         }

         /**
         * @summary 代码生成详细配置列表
         * @param {number}[id] 主键Id
         * @param {number}[codeGenId] 代码生成主表ID
         * @param {string}[columnName] 数据库字段名
         * @param {string}[lowerColumnName] 数据库字段名(首字母小写)
         * @param {string}[columnComment] 字段描述
         * @param {string}[netType] .NET类型
         * @param {string}[effectType] 作用类型（字典）
         * @param {string}[fkEntityName] 外键实体名称
         * @param {string}[lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string}[fkColumnName] 外键显示字段
         * @param {string}[lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string}[fkColumnNetType] 外键显示字段.NET类型
         * @param {string}[dictTypeCode] 字典code
         * @param {string}[whetherRetract] 列表是否缩进（字典）
         * @param {string}[whetherRequired] 是否必填（字典）
         * @param {string}[queryWhether] 是否是查询条件
         * @param {string}[queryType] 查询方式
         * @param {string}[whetherTable] 列表显示
         * @param {string}[whetherOrderBy] 列表排序显示
         * @param {string}[whetherAddUpdate] 增改
         * @param {string}[columnKey] 主外键
         * @param {string}[dataType] 数据库中类型（物理类型）
         * @param {string}[whetherCommon] 是否是通用字段
         * @param {RequestOptions}options 额外配置，用来设置错误提示方法，是否返回原始数据，是否返回原始响应头，参数是否拼接到url等等
         */
         export function sysCodeGenerateConfigListGet(id?: number, codeGenId?: number, columnName?: string, lowerColumnName?: string, columnComment?: string, netType?: string, effectType?: string, fkEntityName?: string, lowerFkEntityName?: string, fkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherOrderBy?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, options?: RequestOptions) {
            const params = {  } as any
            if (id !== undefined) {
                params['Id'] = id;
            }
            if (codeGenId !== undefined) {
                params['CodeGenId'] = codeGenId;
            }
            if (columnName !== undefined) {
                params['ColumnName'] = columnName;
            }
            if (lowerColumnName !== undefined) {
                params['LowerColumnName'] = lowerColumnName;
            }
            if (columnComment !== undefined) {
                params['ColumnComment'] = columnComment;
            }
            if (netType !== undefined) {
                params['NetType'] = netType;
            }
            if (effectType !== undefined) {
                params['EffectType'] = effectType;
            }
            if (fkEntityName !== undefined) {
                params['FkEntityName'] = fkEntityName;
            }
            if (lowerFkEntityName !== undefined) {
                params['LowerFkEntityName'] = lowerFkEntityName;
            }
            if (fkColumnName !== undefined) {
                params['FkColumnName'] = fkColumnName;
            }
            if (lowerFkColumnName !== undefined) {
                params['LowerFkColumnName'] = lowerFkColumnName;
            }
            if (fkColumnNetType !== undefined) {
                params['FkColumnNetType'] = fkColumnNetType;
            }
            if (dictTypeCode !== undefined) {
                params['DictTypeCode'] = dictTypeCode;
            }
            if (whetherRetract !== undefined) {
                params['WhetherRetract'] = whetherRetract;
            }
            if (whetherRequired !== undefined) {
                params['WhetherRequired'] = whetherRequired;
            }
            if (queryWhether !== undefined) {
                params['QueryWhether'] = queryWhether;
            }
            if (queryType !== undefined) {
                params['QueryType'] = queryType;
            }
            if (whetherTable !== undefined) {
                params['WhetherTable'] = whetherTable;
            }
            if (whetherOrderBy !== undefined) {
                params['WhetherOrderBy'] = whetherOrderBy;
            }
            if (whetherAddUpdate !== undefined) {
                params['WhetherAddUpdate'] = whetherAddUpdate;
            }
            if (columnKey !== undefined) {
                params['ColumnKey'] = columnKey;
            }
            if (dataType !== undefined) {
                params['DataType'] = dataType;
            }
            if (whetherCommon !== undefined) {
                params['WhetherCommon'] = whetherCommon;
            }
            return defHttp.request<XnRestfulResultOfListOfCodeGenConfig>(
              {
                url: '/sysCodeGenerateConfig/list',
                method: 'GET',
                headers: {'Content-Type': 'application/json'},
                params
              },
              options
            )
         }
